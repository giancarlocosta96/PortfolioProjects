--Which products should we order more or less of? 

--Determining the low stock for each product 

SELECT p.productCode,
ROUND(SUM(o.quantityordered)*1.00/p.quantityInStock,2) as low_stock
FROM products p
JOIN orderdetails o
ON p.productCode=o.productCode
GROUP by p.productcode 
ORDER by low_stock DESC 
LIMIT 10

--Determining the product performance of each product 

SELECT productCode, sum(quantityordered*priceEach) as product_performance
FROM orderdetails
GROUP by productCode 
Order by product_performance DESC
LIMIT 10

--Determining priority products for restocking 

/*Priority products for restocking are those with high product performance and on the brink of being 
out of stock */

WITH low_stock_table AS (
SELECT p.productCode,
ROUND(SUM(o.quantityordered)*1.00/p.quantityInStock,2) as low_stock
FROM products p
JOIN orderdetails o
ON p.productCode=o.productCode
GROUP by p.productcode 
ORDER by low_stock DESC 
LIMIT 10)
SELECT productCode, sum(quantityordered*priceEach) as product_performance
FROM orderdetails
WHERE productCode IN (SELECT productCode
						FROM low_stock_table)
GROUP by productCode 
Order by product_performance DESC
LIMIT 10

--How should we match marketing and communication strategies to customer behaviour? 

--Determining profit for each customer 

SELECT o.customerNumber, SUM(od.quantityOrdered*(od.priceEach-p.buyPrice)) AS  profit
FROM products p 
JOIN orderdetails od
ON p.productCode=od.productCode
JOIN orders o
ON od.orderNumber=o.orderNumber
GROUP by o.customerNumber

--Determinging the top 5 VIP customers 

WITH profit_table AS (
SELECT o.customerNumber, SUM(od.quantityOrdered*(od.priceEach-p.buyPrice)) AS  profit
FROM products p 
JOIN orderdetails od
ON p.productCode=od.productCode
JOIN orders o
ON od.orderNumber=o.orderNumber
GROUP by o.customerNumber)
SELECT c.contactFirstName, c.contactLastName, c.city, c.country, pt.profit
FROM customers c 
JOIN profit_table pt 
ON c.customerNumber=pt.customerNumber 
ORDER by pt.profit DESC 
LIMIT 5

--Determinging the top 5 least engaged customers 

WITH profit_table AS (
SELECT o.customerNumber, SUM(od.quantityOrdered*(od.priceEach-p.buyPrice)) AS  profit
FROM products p 
JOIN orderdetails od
ON p.productCode=od.productCode
JOIN orders o
ON od.orderNumber=o.orderNumber
GROUP by o.customerNumber)
SELECT c.contactFirstName, c.contactLastName, c.city, c.country, pt.profit
FROM customers c 
JOIN profit_table pt 
ON c.customerNumber=pt.customerNumber 
ORDER by pt.profit  
LIMIT 5

--How Much Can We Spend on Acquiring New Customers?

WITH 

payment_with_year_month_table AS (
SELECT *, 
       CAST(SUBSTR(paymentDate, 1,4) AS INTEGER)*100 + CAST(SUBSTR(paymentDate, 6,7) AS INTEGER) AS year_month
  FROM payments p
),

customers_by_month_table AS (
SELECT p1.year_month, COUNT(*) AS number_of_customers, SUM(p1.amount) AS total
  FROM payment_with_year_month_table p1
 GROUP BY p1.year_month
),

new_customers_by_month_table AS (
SELECT p1.year_month, 
       COUNT(*) AS number_of_new_customers,
       SUM(p1.amount) AS new_customer_total,
       (SELECT number_of_customers
          FROM customers_by_month_table c
        WHERE c.year_month = p1.year_month) AS number_of_customers,
       (SELECT total
          FROM customers_by_month_table c
         WHERE c.year_month = p1.year_month) AS total
  FROM payment_with_year_month_table p1
 WHERE p1.customerNumber NOT IN (SELECT customerNumber
                                   FROM payment_with_year_month_table p2
                                  WHERE p2.year_month < p1.year_month)
 GROUP BY p1.year_month
)

SELECT year_month, 
       ROUND(number_of_new_customers*100/number_of_customers,1) AS number_of_new_customers_props,
       ROUND(new_customer_total*100/total,1) AS new_customers_total_props
  FROM new_customers_by_month_table;
